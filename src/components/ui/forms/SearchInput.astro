---
import CodeViewer from '../../util/CodeViewer.astro';

const code = '<div class="search-container">' +
  '  <div class="search-input-wrapper">' +
  '    <input type="text" class="search-input" placeholder="Buscar productos, usuarios, etc...">' +
  '    <button class="search-button">' +
  '      <svg width="20" height="20" viewBox="0 0 24 24" fill="none">' +
  '        <circle cx="11" cy="11" r="8" stroke="currentColor" stroke-width="2"/>' +
  '        <path d="m21 21-4.35-4.35" stroke="currentColor" stroke-width="2"/>' +
  '      </svg>' +
  '    </button>' +
  '  </div>' +
  '  <div class="search-suggestions" style="display: none;">' +
  '    <div class="suggestion-item">üîç Buscar "laptop" en productos</div>' +
  '    <div class="suggestion-item">üîç Buscar "usuario123" en usuarios</div>' +
  '    <div class="suggestion-item">üîç Buscar "tutorial" en documentos</div>' +
  '  </div>' +
  '</div>';
---

<div class="component-preview">
  <h3>Search Input</h3>
  <p>Campo de b√∫squeda con sugerencias, animaciones y estados de carga.</p>
  
  <div class="demo-container">
    <div class="search-container">
      <div class="search-input-wrapper">
        <input type="text" class="search-input" placeholder="Buscar productos, usuarios, etc...">
        <button class="search-button">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
            <circle cx="11" cy="11" r="8" stroke="currentColor" stroke-width="2"/>
            <path d="m21 21-4.35-4.35" stroke="currentColor" stroke-width="2"/>
          </svg>
        </button>
      </div>
      <div class="search-suggestions" style="display: none;">
        <div class="suggestion-item">üîç Buscar "laptop" en productos</div>
        <div class="suggestion-item">üîç Buscar "usuario123" en usuarios</div>
        <div class="suggestion-item">üîç Buscar "tutorial" en documentos</div>
      </div>
    </div>
  </div>

</div>

<CodeViewer code={code} lang="html" />

<style>
  .search-container {
    width: 100%;
    max-width: 400px;
    position: relative;
  }

  .search-input-wrapper {
    display: flex;
    align-items: center;
    background: var(--surface-color);
    border: 2px solid var(--border-color);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .search-input-wrapper:focus-within {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .search-input {
    flex: 1;
    padding: 1rem 1.25rem;
    border: none;
    background: transparent;
    color: var(--text-color);
    font-size: 1rem;
    outline: none;
  }

  .search-input::placeholder {
    color: var(--text-secondary);
  }

  .search-button {
    padding: 1rem 1.25rem;
    border: none;
    background: var(--primary-color);
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-button:hover {
    background: var(--accent-hover, #2563eb);
    transform: scale(1.02);
  }

  .search-button:active {
    transform: scale(0.98);
  }

  .search-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    margin-top: 0.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 10;
  }

  .suggestion-item {
    padding: 0.75rem 1rem;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all 0.2s ease;
    border-bottom: 1px solid var(--border-color);
  }

  .suggestion-item:last-child {
    border-bottom: none;
  }

  .suggestion-item:hover {
    background: var(--surface-secondary);
    color: var(--text-color);
  }

  /* Loading state */
  .search-button.loading {
    pointer-events: none;
  }

  .search-button.loading svg {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.querySelector('.search-input') as HTMLInputElement;
    const searchButton = document.querySelector('.search-button') as HTMLButtonElement;
    const suggestions = document.querySelector('.search-suggestions') as HTMLElement;

    if (searchInput && suggestions) {
      searchInput.addEventListener('input', function(this: HTMLInputElement) {
        if (this.value.length > 2) {
          suggestions.style.display = 'block';
        } else {
          suggestions.style.display = 'none';
        }
      });

      searchInput.addEventListener('focus', function(this: HTMLInputElement) {
        if (this.value.length > 2) {
          suggestions.style.display = 'block';
        }
      });
    }

    // Hide suggestions when clicking outside
    document.addEventListener('click', function(e) {
      const target = e.target as HTMLElement;
      if (suggestions && !target.closest('.search-container')) {
        suggestions.style.display = 'none';
      }
    });

    // Handle suggestion clicks
    const suggestionItems = document.querySelectorAll('.suggestion-item') as NodeListOf<HTMLElement>;
    suggestionItems.forEach(item => {
      item.addEventListener('click', function(this: HTMLElement) {
        if (searchInput && suggestions) {
          searchInput.value = this.textContent?.replace('üîç Buscar "', '').split('" en')[0] || '';
          suggestions.style.display = 'none';
        }
      });
    });

    // Handle search button click
    if (searchButton) {
      searchButton.addEventListener('click', function(this: HTMLButtonElement) {
        this.classList.add('loading');
        setTimeout(() => {
          this.classList.remove('loading');
        }, 1500);
      });
    }
  });
</script>
