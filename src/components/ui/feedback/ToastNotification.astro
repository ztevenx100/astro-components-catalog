---
import CodeViewer from '../../util/CodeViewer.astro';
import '../../../styles/card-base.css';

const code = `
<div class="toast-container" id="toastContainer">
  <!-- Los toasts aparecerán aquí dinámicamente -->
</div>

<div class="toast-demo-controls">
  <button onclick="showToast('success', '¡Éxito!', 'Operación completada correctamente')">Success Toast</button>
  <button onclick="showToast('warning', 'Advertencia', 'Tu sesión expirará en 5 minutos')">Warning Toast</button>
  <button onclick="showToast('error', 'Error', 'No se pudo conectar al servidor')">Error Toast</button>
  <button onclick="showToast('info', 'Información', 'Nueva actualización disponible')">Info Toast</button>
</div>

<style>
  .toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    max-width: 380px;
    width: 100%;
  }

  .toast-notification {
    background: var(--surface-color);
    border-radius: 12px;
    padding: 1rem 1.25rem;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15), 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid var(--border-color);
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(20px);
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    transform: translateX(100%);
    animation: slideInToast 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  .toast-notification::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    transition: all 0.3s ease;
  }

  .toast-notification.success::before {
    background: linear-gradient(180deg, #10b981, #059669);
  }

  .toast-notification.warning::before {
    background: linear-gradient(180deg, #f59e0b, #d97706);
  }

  .toast-notification.error::before {
    background: linear-gradient(180deg, #ef4444, #dc2626);
  }

  .toast-notification.info::before {
    background: linear-gradient(180deg, #3b82f6, #2563eb);
  }

  /* Más estilos CSS... */
</style>

<script>
function showToast(type, title, message, duration = 4000) {
  const container = document.getElementById('toastContainer');
  const toast = document.createElement('div');
  
  const icons = {
    success: '✓',
    warning: '⚠',
    error: '✗',
    info: 'ℹ'
  };
  
  toast.className = \`toast-notification \${type}\`;
  toast.innerHTML = \`
    <div class="toast-icon">
      <span class="icon">\${icons[type]}</span>
    </div>
    <div class="toast-content">
      <h6 class="toast-title">\${title}</h6>
      <p class="toast-message">\${message}</p>
    </div>
    <button class="toast-close" onclick="removeToast(this.parentElement)">×</button>
  \`;
  
  container.appendChild(toast);
  
  setTimeout(() => {
    if (toast.parentElement) {
      removeToast(toast);
    }
  }, duration);
}

function removeToast(toast) {
  toast.classList.add('removing');
  setTimeout(() => {
    if (toast.parentElement) {
      toast.parentElement.removeChild(toast);
    }
  }, 300);
}
</script>
`;
---

<div class="component-preview">
  <h3>Toast Notifications</h3>
  <p>Notificaciones temporales que aparecen en la esquina de la pantalla con animaciones suaves.</p>
  
  <div class="demo-container">
    <div class="toast-demo-controls">
      <button onclick="showToast('success', '¡Éxito!', 'Operación completada correctamente')">Success Toast</button>
      <button onclick="showToast('warning', 'Advertencia', 'Tu sesión expirará en 5 minutos')">Warning Toast</button>
      <button onclick="showToast('error', 'Error', 'No se pudo conectar al servidor')">Error Toast</button>
      <button onclick="showToast('info', 'Información', 'Nueva actualización disponible')">Info Toast</button>
    </div>
    
    <div class="static-demo">
      <p class="demo-instruction">Haz clic en los botones de arriba para ver los toasts en acción</p>
      
      <!-- Ejemplo estático para mostrar el diseño -->
      <div class="toast-preview">
        <div class="toast-notification success static">
          <div class="toast-icon">
            <span class="icon">✓</span>
          </div>
          <div class="toast-content">
            <h6 class="toast-title">¡Éxito!</h6>
            <p class="toast-message">Operación completada correctamente</p>
          </div>
          <button class="toast-close">×</button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Container para los toasts dinámicos -->
<div class="toast-container" id="toastContainer"></div>

<CodeViewer code={code} />

<script is:inline>
function showToast(type, title, message, duration = 4000) {
  const container = document.getElementById('toastContainer');
  if (!container) return;
  
  const toast = document.createElement('div');
  
  const icons = {
    success: '✓',
    warning: '⚠',
    error: '✗',
    info: 'ℹ'
  };
  
  toast.className = `toast-notification ${type}`;
  toast.innerHTML = `
    <div class="toast-icon">
      <span class="icon">${icons[type]}</span>
    </div>
    <div class="toast-content">
      <h6 class="toast-title">${title}</h6>
      <p class="toast-message">${message}</p>
    </div>
    <button class="toast-close" onclick="removeToast(this.parentElement)">×</button>
  `;
  
  container.appendChild(toast);
  
  // Auto remove after duration
  setTimeout(() => {
    if (toast.parentElement) {
      removeToast(toast);
    }
  }, duration);
}

function removeToast(toast) {
  if (!toast) return;
  toast.classList.add('removing');
  setTimeout(() => {
    if (toast.parentElement) {
      toast.parentElement.removeChild(toast);
    }
  }, 300);
}

// Make functions globally available
window.showToast = showToast;
window.removeToast = removeToast;
</script>

<style is:global>
  /* Toast Container - Fixed position */
  .toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    max-width: 380px;
    width: 100%;
    pointer-events: none;
  }

  .toast-container > * {
    pointer-events: auto;
  }

  /* Toast Notification Styles */
  .toast-notification {
    background: var(--surface-color);
    border-radius: 12px;
    padding: 1rem 1.25rem;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15), 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid var(--border-color);
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(20px);
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    transform: translateX(100%);
    animation: slideInToast 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  .toast-notification.static {
    transform: translateX(0);
    animation: none;
    position: relative;
    margin: 1rem auto;
    max-width: 300px;
  }

  .toast-notification::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    transition: all 0.3s ease;
  }

  .toast-notification.success::before {
    background: linear-gradient(180deg, #10b981, #059669);
  }

  .toast-notification.warning::before {
    background: linear-gradient(180deg, #f59e0b, #d97706);
  }

  .toast-notification.error::before {
    background: linear-gradient(180deg, #ef4444, #dc2626);
  }

  .toast-notification.info::before {
    background: linear-gradient(180deg, #3b82f6, #2563eb);
  }

  .toast-notification.removing {
    animation: slideOutToast 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  .toast-icon {
    width: 36px;
    height: 36px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    transition: transform 0.3s ease;
  }

  .toast-notification.success .toast-icon {
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
  }

  .toast-notification.warning .toast-icon {
    background: linear-gradient(135deg, #f59e0b, #d97706);
    color: white;
  }

  .toast-notification.error .toast-icon {
    background: linear-gradient(135deg, #ef4444, #dc2626);
    color: white;
  }

  .toast-notification.info .toast-icon {
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    color: white;
  }

  .toast-icon .icon {
    font-size: 1rem;
    font-weight: 700;
  }

  .toast-content {
    flex: 1;
    min-width: 0;
  }

  .toast-title {
    margin: 0 0 0.25rem 0;
    color: var(--text-color);
    font-size: 0.9rem;
    font-weight: 700;
    line-height: 1.2;
  }

  .toast-message {
    margin: 0;
    color: var(--text-secondary);
    font-size: 0.8rem;
    line-height: 1.4;
  }

  .toast-close {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    width: 20px;
    height: 20px;
    border: none;
    background: transparent;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 1rem;
    font-weight: 700;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
  }

  .toast-close:hover {
    background: var(--surface-secondary);
    color: var(--text-color);
    transform: scale(1.1);
  }

  @keyframes slideInToast {
    from {
      opacity: 0;
      transform: translateX(100%);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideOutToast {
    from {
      opacity: 1;
      transform: translateX(0) scale(1);
    }
    to {
      opacity: 0;
      transform: translateX(100%) scale(0.95);
    }
  }

  /* Demo Controls */
  .toast-demo-controls {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
    justify-content: center;
    margin: 1.5rem 0;
  }

  .toast-demo-controls button {
    border: none;
    padding: 0.75rem 1.25rem;
    border-radius: 8px;
    font-size: 0.85rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    background: var(--surface-color);
    color: var(--text-color);
    border: 1px solid var(--border-color);
  }

  .toast-demo-controls button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    background: var(--primary-color);
    color: white;
  }

  .static-demo {
    text-align: center;
    margin-top: 2rem;
  }

  .demo-instruction {
    color: var(--text-secondary);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    font-style: italic;
  }

  .toast-preview {
    display: flex;
    justify-content: center;
  }

  /* Component Preview Styles */
  .component-preview {
    padding: 2rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 16px;
    background: linear-gradient(135deg, var(--background-color) 0%, var(--surface-color) 100%);
    transition: all 0.3s ease;
  }

  .component-preview h3 {
    margin: 0 0 0.5rem 0;
    color: var(--text-color);
    font-size: 1.5rem;
    font-weight: 700;
    text-align: center;
    background: linear-gradient(135deg, var(--text-color), var(--primary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .component-preview p {
    margin: 0 0 1.5rem 0;
    color: var(--text-secondary);
    line-height: 1.6;
    text-align: center;
    font-size: 1rem;
  }

  .demo-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 200px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .toast-container {
      top: 10px;
      right: 10px;
      left: 10px;
      max-width: none;
    }

    .toast-notification {
      padding: 0.875rem 1rem;
    }

    .toast-icon {
      width: 32px;
      height: 32px;
    }

    .toast-icon .icon {
      font-size: 0.9rem;
    }

    .toast-title {
      font-size: 0.85rem;
    }

    .toast-message {
      font-size: 0.75rem;
    }

    .toast-demo-controls {
      flex-direction: column;
      align-items: center;
      gap: 0.5rem;
    }

    .toast-demo-controls button {
      width: 200px;
    }
  }
</style>
