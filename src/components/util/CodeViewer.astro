---
interface Props {
  code: string;
  lang?: string;
}

const { code, lang = 'html' } = Astro.props;
---

<div class="code-viewer">
  <div class="code-viewer-header">
    <span class="lang-tag">{lang}</span>
    <div class="header-actions">
      <button class="action-btn copy-btn" title="Copiar código">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>
        <span class="copy-text">Copiar</span>
      </button>
      <button class="action-btn toggle-code-btn">Mostrar Código</button>
    </div>
  </div>
  <div class="code-container" style="display: none;">
    <pre><code class={`language-${lang}`}>{code.trim()}</code></pre>
  </div>
</div>

<script>
  document.querySelectorAll('.code-viewer').forEach(viewer => {
    const toggleBtn = viewer.querySelector('.toggle-code-btn');
    const copyBtn = viewer.querySelector('.copy-btn');
    const codeContainer = viewer.querySelector('.code-container');
    const codeEl = viewer.querySelector('code');
    const copyTextEl = viewer.querySelector('.copy-text');

    if (toggleBtn && codeContainer instanceof HTMLElement) {
      toggleBtn.addEventListener('click', () => {
        const isHidden = codeContainer.style.display === 'none';
        codeContainer.style.display = isHidden ? 'block' : 'none';
        toggleBtn.textContent = isHidden ? 'Ocultar Código' : 'Mostrar Código';
      });
    }

    if (copyBtn && codeEl && copyTextEl) {
      copyBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(codeEl.innerText).then(() => {
          copyTextEl.textContent = '¡Copiado!';
          setTimeout(() => {
            copyTextEl.textContent = 'Copiar';
          }, 2000);
        }).catch(err => {
          console.error('Error al copiar el código: ', err);
          copyTextEl.textContent = 'Error';
        });
      });
    }
  });
</script>

<style>
  .code-viewer {
    margin-top: 0; /* Eliminado el margen superior para que lo controle el contenedor padre */
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
    background-color: var(--code-bg, #f8f9fa);
    transition: border-color 0.3s ease, background-color 0.3s ease;
  }

  html.dark .code-viewer {
    --code-bg: #1a202c;
  }

  .code-viewer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 1rem;
    background-color: var(--code-header-bg, #e9ecef);
    border-bottom: 1px solid var(--border-color);
  }

  html.dark .code-viewer-header {
    --code-header-bg: #2d3748;
  }

  .lang-tag {
    font-family: 'Fira Code', monospace;
    font-size: 0.8rem;
    color: var(--text-secondary);
    text-transform: uppercase;
  }

  .header-actions {
    display: flex;
    gap: 0.5rem;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.3rem 0.7rem;
    border: 1px solid transparent;
    border-radius: 6px;
    background: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-family: inherit;
    font-size: 0.85rem;
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  .action-btn:hover {
    background-color: var(--button-hover-bg, #0000001a);
    color: var(--text-color);
  }
  
  html.dark .action-btn:hover {
    --button-hover-bg: #ffffff1a;
  }

  .action-btn svg {
    width: 16px;
    height: 16px;
  }

  .code-container {
    background-color: var(--code-bg, #f8f9fa);
  }

  pre {
    margin: 0;
    padding: 1rem;
    overflow-x: auto;
  }

  code {
    font-family: 'Fira Code', monospace;
    font-size: 0.875rem;
    color: var(--code-text-color, #212529);
    background: none;
  }

  html.dark code {
    --code-text-color: #e2e8f0;
  }
</style>
