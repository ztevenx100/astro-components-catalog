---
interface Props {
  code: string;
  lang?: string;
}

const { code, lang = 'html' } = Astro.props;
---

<div class="code-viewer">
  <div class="code-viewer-header">
    <span class="lang-tag">{lang}</span>
    <div class="header-actions">
      <button class="action-btn copy-btn" title="Copiar código">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>
        <span class="copy-text">Copiar</span>
      </button>
      <button class="action-btn toggle-code-btn">Mostrar Código</button>
    </div>
  </div>
  <div class="code-container" style="display: none;">
    <pre><code class={`language-${lang}`}>{code.trim()}</code></pre>
  </div>
</div>

<script>
  // Función para esperar a que Prism.js esté disponible
  function waitForPrism(): Promise<typeof window.Prism> {
    return new Promise((resolve, reject) => {
      if (typeof window !== 'undefined' && window.Prism) {
        resolve(window.Prism);
        return;
      }
      
      let attempts = 0;
      const maxAttempts = 50; // 5 segundos máximo
      
      const checkPrism = () => {
        attempts++;
        
        if (typeof window !== 'undefined' && window.Prism) {
          resolve(window.Prism);
        } else if (attempts >= maxAttempts) {
          reject(new Error('Prism.js no pudo cargarse después de 5 segundos'));
        } else {
          setTimeout(checkPrism, 100);
        }
      };
      
      checkPrism();
    });
  }

  // Función para inicializar un code viewer
  function initCodeViewer(viewer: Element) {
    const toggleBtn = viewer.querySelector('.toggle-code-btn');
    const copyBtn = viewer.querySelector('.copy-btn');
    const codeContainer = viewer.querySelector('.code-container');
    const codeEl = viewer.querySelector('code');
    const copyTextEl = viewer.querySelector('.copy-text');

    if (toggleBtn && codeContainer instanceof HTMLElement && codeEl) {
      toggleBtn.addEventListener('click', async () => {
        const isHidden = codeContainer.style.display === 'none';
        codeContainer.style.display = isHidden ? 'block' : 'none';
        toggleBtn.textContent = isHidden ? 'Ocultar Código' : 'Mostrar Código';

        // Resaltar el código si se está mostrando y no ha sido resaltado antes
        if (isHidden && !codeEl.hasAttribute('data-highlighted')) {
          try {
            const prism = await waitForPrism();
            prism.highlightElement(codeEl);
            codeEl.setAttribute('data-highlighted', 'true');
          } catch (err) {
            console.warn('Prism.js no está disponible, saltando el resaltado de sintaxis:', err);
          }
        }
      });
    }

    if (copyBtn && codeEl && copyTextEl) {
      copyBtn.addEventListener('click', async () => {
        try {
          // Obtener el texto del código (sin el HTML de resaltado)
          const codeText = codeEl.textContent || codeEl.innerText || '';
          
          if (navigator.clipboard && navigator.clipboard.writeText) {
            await navigator.clipboard.writeText(codeText);
            copyTextEl.textContent = '¡Copiado!';
          } else {
            // Fallback para navegadores más antiguos
            const textArea = document.createElement('textarea');
            textArea.value = codeText;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            copyTextEl.textContent = '¡Copiado!';
          }
          
          setTimeout(() => {
            copyTextEl.textContent = 'Copiar';
          }, 2000);
        } catch (err) {
          console.error('Error al copiar el código: ', err);
          copyTextEl.textContent = 'Error';
          setTimeout(() => {
            copyTextEl.textContent = 'Copiar';
          }, 2000);
        }
      });
    }
  }

  // Inicializar todos los code viewers cuando el DOM esté listo
  function initAllCodeViewers() {
    document.querySelectorAll('.code-viewer').forEach(initCodeViewer);
  }

  // Ejecutar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAllCodeViewers);
  } else {
    initAllCodeViewers();
  }

  // También ejecutar cuando se cargue la página (por si acaso)
  window.addEventListener('load', initAllCodeViewers);
</script>

<style>
  .code-viewer {
    margin-top: 0;
    border: 1px solid var(--border-color);
    border-radius: 12px;
    overflow: hidden;
    background-color: var(--surface-color);
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-sm);
  }

  .code-viewer:hover {
    box-shadow: var(--shadow-md);
  }

  .code-viewer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background-color: var(--surface-secondary);
    border-bottom: 1px solid var(--border-color);
    transition: background-color var(--transition-normal);
  }

  .lang-tag {
    font-family: 'Fira Code', monospace;
    font-size: 0.8rem;
    color: var(--text-secondary);
    text-transform: uppercase;
    font-weight: 600;
    background: var(--primary-light);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    transition: all var(--transition-normal);
  }

  html.dark .lang-tag {
    background: var(--primary-dark);
    color: var(--primary-light);
  }

  .header-actions {
    display: flex;
    gap: 0.5rem;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--surface-color);
    color: var(--text-secondary);
    cursor: pointer;
    font-family: inherit;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-sm);
  }

  .action-btn:hover {
    background-color: var(--surface-hover);
    color: var(--text-color);
    border-color: var(--primary-color);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .action-btn:active {
    transform: translateY(0);
    box-shadow: var(--shadow-sm);
  }

  .action-btn svg {
    width: 16px;
    height: 16px;
    transition: transform var(--transition-normal);
  }

  .action-btn:hover svg {
    transform: scale(1.1);
  }

  .copy-btn:hover {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }

  .toggle-code-btn:hover {
    background-color: var(--surface-hover);
  }

  .code-container {
    position: relative;
    overflow: hidden;
  }

  pre {
    margin: 0;
    padding: 1.5rem;
    overflow-x: auto;
    background: transparent !important;
    border: none;
    font-size: 0.875rem;
    line-height: 1.6;
  }

  code[class*="language-"] {
    font-family: 'Fira Code', 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 0.875rem;
    font-weight: 400;
    line-height: 1.6;
  }

  /* Scrollbar personalizada para el código */
  .code-container pre::-webkit-scrollbar {
    height: 8px;
  }

  .code-container pre::-webkit-scrollbar-track {
    background: var(--surface-secondary);
    border-radius: 4px;
  }

  .code-container pre::-webkit-scrollbar-thumb {
    background: var(--border-dark);
    border-radius: 4px;
  }

  .code-container pre::-webkit-scrollbar-thumb:hover {
    background: var(--text-muted);
  }

  /* Animación para mostrar/ocultar código */
  .code-container {
    max-height: 0;
    overflow: hidden;
    transition: max-height var(--transition-normal) ease-out;
  }

  .code-container[style*="block"] {
    max-height: 1000px;
    transition: max-height var(--transition-normal) ease-in;
  }

  /* Mejorar la accesibilidad */
  .action-btn:focus-visible {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .code-viewer-header {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }

    .header-actions {
      align-self: stretch;
      justify-content: space-between;
    }

    .action-btn {
      flex: 1;
      justify-content: center;
      padding: 0.5rem;
      font-size: 0.8rem;
    }

    .action-btn .copy-text {
      display: none;
    }

    pre {
      padding: 1rem;
      font-size: 0.8rem;
    }
  }
</style>
