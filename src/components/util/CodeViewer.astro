---
interface Props {
  code: string;
  lang?: string;
}

const { code, lang = 'html' } = Astro.props;
---

<div class="code-viewer">
  <div class="code-viewer-header">
    <span class="lang-tag">{lang}</span>
    <div class="header-actions">
      <button class="action-btn copy-btn" title="Copiar código">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>
        <span class="copy-text">Copiar</span>
      </button>
      <button class="action-btn toggle-code-btn">Mostrar Código</button>
    </div>
  </div>
  <div class="code-container">
    <pre><code class={`language-${lang}`}>{code.trim()}</code></pre>
  </div>
</div>

<script is:inline>
  // Función ULTRA SIMPLE - solo escapar HTML, sin resaltado problemático
  function applyBasicSyntaxHighlight(codeEl) {
    console.log('Aplicando resaltado básico...');
    const code = codeEl.textContent || '';
    
    // Solo escapar HTML para mostrar el código de forma segura
    // SIN aplicar ningún resaltado de colores que pueda romper el código
    const safeCode = code
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
    
    codeEl.innerHTML = safeCode;
    console.log('Código escapado correctamente');
  }

  // Ejecutar cuando el DOM esté listo
  console.log('Estado del DOM:', document.readyState);
  
  // Función simple para inicializar inmediatamente
  function initNow() {
    console.log('=== INICIANDO CODEVIEWER ===');
    const viewers = document.querySelectorAll('.code-viewer');
    console.log('Viewers encontrados:', viewers.length);
    
    if (viewers.length === 0) {
      console.log('No hay viewers, reintentando...');
      setTimeout(initNow, 500);
      return;
    }
    
    viewers.forEach((viewer, index) => {
      console.log(`=== Configurando viewer ${index + 1} ===`);
      
      const toggleBtn = viewer.querySelector('.toggle-code-btn');
      const codeContainer = viewer.querySelector('.code-container');
      const codeEl = viewer.querySelector('code');
      
      console.log('Elementos:', {
        viewer: viewer,
        toggleBtn: toggleBtn,
        codeContainer: codeContainer,
        codeEl: codeEl
      });
      
      if (toggleBtn && codeContainer && codeEl) {
        console.log('Agregando click listener...');
        
        toggleBtn.onclick = function(event) {
          console.log('=== CLICK DETECTADO ===', event);
          
          const isCurrentlyHidden = !codeContainer.classList.contains('show');
          console.log('¿Está oculto?', isCurrentlyHidden);
          
          if (isCurrentlyHidden) {
            console.log('Mostrando código...');
            codeContainer.classList.add('show');
            toggleBtn.textContent = 'Ocultar Código';
            
            // Aplicar resaltado si es necesario
            if (!codeEl.hasAttribute('data-highlighted')) {
              console.log('Aplicando resaltado...');
              applyBasicSyntaxHighlight(codeEl);
              codeEl.setAttribute('data-highlighted', 'basic');
            }
          } else {
            console.log('Ocultando código...');
            codeContainer.classList.remove('show');
            toggleBtn.textContent = 'Mostrar Código';
          }
        };
        
        console.log('Event listener agregado exitosamente');
      } else {
        console.error('Faltan elementos:', {
          toggleBtn: !!toggleBtn,
          codeContainer: !!codeContainer,
          codeEl: !!codeEl
        });
      }
    });
  }
  
  // Ejecutar inmediatamente si el DOM está listo, sino esperar
  if (document.readyState === 'loading') {
    console.log('DOM cargando, esperando...');
    document.addEventListener('DOMContentLoaded', initNow);
  } else {
    console.log('DOM listo, ejecutando ahora...');
    setTimeout(initNow, 100);
  }
</script>

<style>
  .code-viewer {
    margin-top: 0;
    border: 1px solid var(--border-color);
    border-radius: 12px;
    overflow: hidden;
    background-color: var(--surface-color);
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-sm);
  }

  .code-viewer:hover {
    box-shadow: var(--shadow-md);
  }

  .code-viewer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background-color: var(--surface-secondary);
    border-bottom: 1px solid var(--border-color);
    transition: background-color var(--transition-normal);
  }

  .lang-tag {
    font-family: 'Fira Code', monospace;
    font-size: 0.8rem;
    color: var(--text-secondary);
    text-transform: uppercase;
    font-weight: 600;
    background: var(--primary-light);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    transition: all var(--transition-normal);
  }

  html.dark .lang-tag {
    background: var(--primary-dark);
    color: var(--primary-light);
  }

  .header-actions {
    display: flex;
    gap: 0.5rem;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--surface-color);
    color: var(--text-secondary);
    cursor: pointer;
    font-family: inherit;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-sm);
  }

  .action-btn:hover {
    background-color: var(--surface-hover);
    color: var(--text-color);
    border-color: var(--primary-color);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .action-btn:active {
    transform: translateY(0);
    box-shadow: var(--shadow-sm);
  }

  .action-btn svg {
    width: 16px;
    height: 16px;
    transition: transform var(--transition-normal);
  }

  .action-btn:hover svg {
    transform: scale(1.1);
  }

  .copy-btn:hover {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }

  .toggle-code-btn:hover {
    background-color: var(--surface-hover);
  }

  .code-container {
    position: relative;
    overflow: hidden;
  }

  pre {
    margin: 0;
    padding: 1.5rem;
    overflow: visible; /* Dejar que el contenedor padre maneje el scroll */
    background: transparent !important;
    border: none;
    font-size: 0.875rem;
    line-height: 1.6;
    white-space: pre; /* Preservar espacios y saltos de línea */
  }

  code[class*="language-"] {
    font-family: 'Fira Code', 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 0.875rem;
    font-weight: 400;
    line-height: 1.6;
  }

  /* Scrollbar personalizada para el código */
  .code-container pre::-webkit-scrollbar {
    height: 8px;
  }

  .code-container pre::-webkit-scrollbar-track {
    background: var(--surface-secondary);
    border-radius: 4px;
  }

  .code-container pre::-webkit-scrollbar-thumb {
    background: var(--border-dark);
    border-radius: 4px;
  }

  .code-container pre::-webkit-scrollbar-thumb:hover {
    background: var(--text-muted);
  }

  /* Animación para mostrar/ocultar código */
  .code-container {
    max-height: 0;
    overflow: hidden;
    transition: max-height var(--transition-normal) ease-out;
  }

  .code-container.show {
    max-height: 600px; /* Altura máxima más controlada */
    transition: max-height var(--transition-normal) ease-in;
    overflow-y: auto; /* Scroll vertical cuando sea necesario */
    overflow-x: auto; /* Scroll horizontal para código largo */
  }

  /* Scrollbar personalizada para el contenedor de código */
  .code-container::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  .code-container::-webkit-scrollbar-track {
    background: var(--surface-secondary);
    border-radius: 4px;
  }

  .code-container::-webkit-scrollbar-thumb {
    background: var(--border-dark);
    border-radius: 4px;
    transition: background var(--transition-fast);
  }

  .code-container::-webkit-scrollbar-thumb:hover {
    background: var(--text-muted);
  }

  /* Mejorar la accesibilidad */
  .action-btn:focus-visible {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .code-viewer-header {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }

    .header-actions {
      align-self: stretch;
      justify-content: space-between;
    }

    .action-btn {
      flex: 1;
      justify-content: center;
      padding: 0.5rem;
      font-size: 0.8rem;
    }

    .action-btn .copy-text {
      display: none;
    }

    pre {
      padding: 1rem;
      font-size: 0.8rem;
    }
  }
</style>
